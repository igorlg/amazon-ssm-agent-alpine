name: Publish packages to Alpinist

# When its time to do a release do a full build and release to Alpinist
on:
  push:
    branches:
      - add-ci
#     tags:
#       - "*.*.*"

env:
  AWS_REGION: ap-southeast-2
  AWS_IAM_ROLE_ARN: arn:aws:iam::718758479978:role/github-actions-oidc-GitHubIAMRole-IPZBDYTOJ1DQ
  DOCKER_IMAGE_NAME: 718758479978.dkr.ecr.ap-southeast-2.amazonaws.com/ssm-agent-alpine-build

jobs:
  base_image_build:
    name: Build base Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ env.AWS_REGION }}

      - name: Build image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest





  # docker:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Prepare
  #       id: prep
  #       run: |
  #         DOCKER_IMAGE=metcalfc/docker-action-examples
  #         VERSION=edge
  #         if [[ $GITHUB_REF == refs/tags/* ]]; then
  #           VERSION=${GITHUB_REF#refs/tags/v}
  #         fi
  #         if [ "${{ github.event_name }}" = "schedule" ]; then
  #           VERSION=nightly
  #         fi
  #         TAGS="${DOCKER_IMAGE}:${VERSION}"
  #         if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
  #           TAGS="$TAGS,${DOCKER_IMAGE}:latest"
  #         fi
  #         echo ::set-output name=tags::${TAGS}

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #       with:
  #         platforms: all

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-

  #     - name: Login to DockerHub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         builder: ${{ steps.buildx.outputs.name }}
  #         context: ./app
  #         file: ./app/Dockerfile
  #         target: prod
  #         platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.prep.outputs.tags }}
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache

  #     - name: Image digest
  #       run: echo ${{ steps.docker_build.outputs.digest }}
